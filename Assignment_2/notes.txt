Leo:
    - each node contain list of colours, each corresponding to their neighbours, and share this list with their neighbours?
    - Python, OOP approach (interface for agents? and implement different kinds of agents - active vs less active types, a.k.a. more or less willing to change)
    
Aoife:
*Note - for assignment, know how many colours you have as 'minimum'. Each node can know themselves and their neighbours colours, and how many colours are available. They cannot know the exact colour of nodes further than their neighbour.*
*i.e. global number of potential colours*

*Implement a small world graph*
*Implement a graph with 4 nodes - write a function to colour it with minimum two colours*
*Fitness function - error of number of conflicts/constraints. Count constraints and give it a score*

*Each node is an agent - each node takes parameters: neighbours, colours. For each neighbour n, they can select a colour c*

*Fitness on overall graph because to the best of their knowledge (neighbours) and ability (colours available), the individual agent has coloured the graph correctly.*